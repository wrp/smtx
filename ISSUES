
TODO:
	Make the preset keybindings modifiable at startup.
	(eg, implement bind_key as osc)

	Copy-mode, with stack of registers and ability to edit.
	Or, maybe just have a binding (y) that dumps the current content
	of the scrollback region to a file like ~/.smtx-pid-timestamp
	Perhaps use (e) to edit the file (eg, spawn $EDITOR), then (p)
	to paste it.

	Dump select() and use libev or libevent, or at least kqueue/epoll

	Cleanup the osc string handling.  We should parse the parameter in the
	vt state machine rather than passing a string to tput.

	Run the tests in parallel, or speed up the grep()

BUGS:
	Syntax highlighting doesn't work in vim.

	This is dog slow on macos.  top regularly reports 100% cpu.  Should
	stop using select and switch to kqueue.  Probably not worth the
	effort to use libevent or libev.

	Need to handle memory allocation errors more thoroughly.

	Make tput rep work.  eg, tput rep w 5 should write 5 'w' to term,
	but the parameters do not seem to be getting sent properly.  We get
	argc == 1 and argv[0] == 5 - 1, but the w is chomped.  Note that this
	is the only terminfo entry that uses %c, and I suspect there is a bug
	in vtparser

	Figure out why I am getting an extra line at the bottom of screen in
	termux.  Note this happens outside of smtx, so it is not our bug to
	fix, but may be a terminfo issue.  It needs to be understood.

	As of 61c41fe0f1dd73829315c959b69cf44df2af102f, the test suite hangs
	on macos.  Note that all the tests in esctest.py also timeout.

	test_ich consistently fails on macos.  This seems to
	be an issue with terminfo.  On macos:
	$ infocmp $TERM | grep '\<dl\>'
	        dl=\E[%p1%dM, dl1=\E[M, ech=\E[%p1%dX, ed=\E[J, el=\E[K,
		$ tput dl 5 | xxd
		00000000: 1b5b 4d                                  .[M
	but on debian:
	$ infocmp $TERM | grep '\<dl\>'
	        dl=\E[%p1%dM, dl1=\E[M, ech=\E[%p1%dX, ed=\E[J, el=\E[K,
		$ tput dl 5 | xxd
		00000000: 1b5b 354d                                .[5M
	tput is not passing the parameter, so test ich on macos only deletes
	one line.

	Title bars are wonky with zero height canvas.

	csr does not work well with multple canvasses.	Probably the
	correct thing to do is to remove csr functionality.

MAYBE TODO:

	Make it easy to swap bindings.  eg, so that hjkl could be used for
	scrolling in non-full screen mode.  Maybe have labelled bindings,
	so perhaps 'a or 'b would select binding a or b.  Would be simpler
	to use numbers, so 1B or 2B could select bindings 1 or 2.  It seems
	hjkl would be better for scrolling than <> and fb

	Configure bindings from a startup file or ?

	Speed things up for hidden windows.  If a pty is not visible
	on the display, we should (?) read a big chunk of data and store
	it but not actually display anything until the pty is added to
	a canvas.  This may be a bad idea since we would lose escape
	sequences, but overall I like the idea.

	Multi-key bindings (?)

	Add character in title bar to indicate mode.  Need to make
	title bar more functional in general, so this thought should
	probably be consumed by that.  Probably want to be able to send
	arbitrary format strings in through an escape sequence. Note
	that we currently can set the "title" of the window via an osc
	sequence, but that title is only a portion of the title bar.
	Probably want the ability to control the format of the title bar.
	Also, the title bar/row should probably be a subwindow rather
	than just consuming one line of the main window.  All the '-1'
	in the code gets confusing.

	Make it possible for windows to overlap. (Almost certainly don't do this.)

	Implement method to save the current layout into a register.

	Make an action on <tab> that moves to the next canvas.

	In full-screen mode, make hjkl scroll the pty.

	-1v should make the focused canvas the root and keep
	the layout below it instead of making it single screen.  Perhaps
	0v should attempt to layout all windows at one line each.

	Allocate a chunk of struct pty on startup, or just use a static array
	of size 512 or 1024 and stop callocing individual elements.  That should
	cleanup the implementation of new_pty() a bit.
