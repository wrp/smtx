

smtx is derived from mtm (git@github.com:deadpixi/mtm.git).  See the git
log for details.

What is the motivation for smtx?

Originally, I was annoyed at the diffculty of pane management in tmux.  I would
typically only use one pane per window, with occasionally (rarely) 2 panes.  It
is just too difficult to manipulate panes.  I experimented with dvtm, and got as
far as https://github.com/wrp/dvtm/tree/mvtm but was not happy with where that
was going.   While doing that development, I realized that what I wanted was
modes and the ability to scroll horizontally in a window. I wanted to be able
to use the multiplexer on my phone, so I needed the pty to be wider than the
physical screen.  While trying to decide on a name, I discovered mtm and shifted
over to using it because the code base is simpler than dvtm.  I played around with
different behaviors of keystrokes in various modes.  Pretty sure now that what I
want is the ability to easily swap out keybindings.  Right now, playing with the
idea of having one keybinding in which '<>' will scroll the pty horizontally
while all other keys pass through.  Perhaps also have a mode in which 'hjkl' is
used to navigate.  But the key is that it must be very simple to change key
bindings to make the terminal usable on a device with limited keyboard (like
termux on Android).  So the ultimate answer to the existential question is
that smtx provides a window into ptys that are larger than the phsical
device on which it is run.  Also, the ability to easily swap out preset
layouts or generate layouts dynamically.  For example,
to access the preset layout with 5 screens, you could do: CMD-5v
(or printf '\033[60;1:.5 .25:1 .5:1 .75:1 1:1\007') to generate
a layout that looks like:

+--------------------------------------+---------------------------------------+
|                                      |                                       |
|                                      |                                       |
|                                      +---------------------------------------+
|                                      |                                       |
|                                      |                                       |
|                                      +---------------------------------------+
|                                      |                                       |
|                                      |                                       |
|                                      +---------------------------------------+
|                                      |                                       |
|                                      |                                       |
+--------------------------------------+---------------------------------------+

By generating layouts on the fly with an osc string, it is trivial to generate
scripts to manipulate the windows.
